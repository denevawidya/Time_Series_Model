# -*- coding: utf-8 -*-
"""Proyek_Time_Series_Deneva_W.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F0H4w9CJNhsXekGHCgjklI7oL64Gk16I

# **Time Series Project**
"""

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats

"""## Load Data

Dataset = Monthly average temperature around Aomori City, Aomori Prefecture, Japan from January 1882 to December 2019.
"""

#importing data
df = pd.read_csv('monthly_temperature_aomori_city.csv')
df

df.columns

df.shape

df.info()

"""## Data Cleansing"""

df.isna().sum()

df = df[['year','temperature']]
df

"""## Split Data"""

import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

# get data values
year = df['year'].values
temp = df['temperature'].values

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(temp, year, test_size = 0.2, random_state = 0 , shuffle=False)
print(len(x_train), len(x_test))

plt.figure(figsize=(30,5))

plt.plot(year, temp)
plt.title('Temperature average',
          fontsize=20);

"""## Modelling"""

from keras.layers import Dense, LSTM

data_x_train = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=5000)
data_x_test = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=5000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

lr_schedule = tf.keras.callbacks.LearningRateScheduler(
    lambda epoch: 1e-8 * 10**(epoch / 20))
optimizer = tf.keras.optimizers.SGD(lr=1e-8, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

max = df['temperature'].max()
print(max)

min = df['temperature'].min()
print(min)

x = (26.0 - -5.7) * (10 / 100)
print(x)

# callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< x):
      self.model.stop_training = True
      print("\nMAE of the model < 10% of data scale")
callbacks = myCallback()

history = model.fit(data_x_train ,epochs=100, validation_data=data_x_test, callbacks=[callbacks])

"""## Plotting"""

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# plot of loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()